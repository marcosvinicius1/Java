/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.atmatech.painel.view;

import br.com.atmatech.painel.beans.DBConfigBeans;
import br.com.atmatech.painel.beans.Tb_ConfigBeans;
import br.com.atmatech.painel.beans.Tb_Prod_PainelBeans;
import br.com.atmatech.painel.config.DBConfig;
import br.com.atmatech.painel.dao.Tb_Prod_PainelDao;
import java.awt.Color;
import java.awt.Font;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcos
 */
public class ViewLayoutTabelas extends javax.swing.JPanel {

    /**
     * Creates new form ViewLayoutTabelas
     */
    Boolean tabela1;
    Boolean tabela2;
    Boolean tabela3;
    Boolean tabela4;
    List<Tb_Prod_PainelBeans> lppbf = new ArrayList<>();
    ViewPrincipal view;

    public ViewLayoutTabelas(Boolean tabela1,Boolean tabela2,Boolean tabela3,Boolean tabela4, ViewPrincipal view) {
        initComponents();
        this.tabela1 = tabela1;
        this.tabela2 = tabela2;
        this.tabela3 = tabela3;
        this.tabela4 = tabela4;
        this.view = view;
        try{
        inicializaPainel();
        ajustaColunasPainel();
        updateInicializaPainel();
        }catch(Exception ex){
            new DBConfig().createArqLog("ViewLayoutTabelas-ViewLayoutTabelas:"+ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        setBackground(new java.awt.Color(204, 0, 0));
        setForeground(new java.awt.Color(204, 0, 0));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setBorder(null);

        jTable1.setForeground(new java.awt.Color(255, 51, 51));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÃ“DIGO", "PRODUTO", "UNID", "OFERTA", "VALOR 1", "VALOR 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable1.setGridColor(new java.awt.Color(255, 0, 0));
        jTable1.setRowHeight(55);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowVerticalLines(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTable2.setForeground(new java.awt.Color(255, 51, 51));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "PRODUTO", "UNID", "OFERTA", "VALOR 1", "VALOR 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setGridColor(new java.awt.Color(255, 0, 0));
        jTable2.setRowHeight(55);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.setShowVerticalLines(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTable3.setForeground(new java.awt.Color(255, 51, 51));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "PRODUTO", "UNID", "OFERTA", "VALOR 1", "VALOR 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setGridColor(new java.awt.Color(255, 0, 0));
        jTable3.setRowHeight(55);
        jTable3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable3.setShowVerticalLines(false);
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(4).setResizable(false);
            jTable3.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane3);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTable4.setForeground(new java.awt.Color(255, 51, 51));
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "PRODUTO", "UNID", "OFERTA", "VALOR 1", "VALOR 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setGridColor(new java.awt.Color(255, 0, 0));
        jTable4.setRowHeight(55);
        jTable4.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable4.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable4.setShowVerticalLines(false);
        jTable4.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setResizable(false);
            jTable4.getColumnModel().getColumn(1).setResizable(false);
            jTable4.getColumnModel().getColumn(2).setResizable(false);
            jTable4.getColumnModel().getColumn(3).setResizable(false);
            jTable4.getColumnModel().getColumn(4).setResizable(false);
            jTable4.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane4);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables

    private void cargaPainel(Boolean tabela1,Boolean tabela2,Boolean tabela3,Boolean tabela4) {
        //jTable1.setRowHeight(1, 32);
        DecimalFormat formatter = new DecimalFormat(",##0.00");
        //System.err.println(tabela);
        try {            
            if (tabela1) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setNumRows(0);
                List<Tb_Prod_PainelBeans> lppb = new Tb_Prod_PainelDao().getProdPainel(new DBConfigBeans().getTerminal(),1);
                this.lppbf.addAll(lppb);                 
                for (Tb_Prod_PainelBeans ppb : lppb) {
                    String oferta = "";
                    String valor2="";
                    if (ppb.getOferta()) {
                        oferta = "<html><font color=red>OFERTA</font></html>";
                    }
                    if(ppb.getValor2()==0){
                        valor2="";
                    }else{
                        valor2=formatter.format(ppb.getValor2()).toString();
                    }
                    model.addRow(new Object[]{ppb.getCodigo(), ppb.getDescricao(), ppb.getUnid(), oferta, formatter.format(ppb.getValor1()), valor2});
                }
            }
//
            if (tabela2) {
                DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
                model2.setNumRows(0);
                List<Tb_Prod_PainelBeans> lppb = new Tb_Prod_PainelDao().getProdPainel(new DBConfigBeans().getTerminal(),2);
                this.lppbf.addAll(lppb);
                for (Tb_Prod_PainelBeans ppb : lppb) {
                    String oferta = "";
                    String valor2="";
                    if (ppb.getOferta()) {
                        oferta = "<html><font color=red>OFERTA</font></html>";
                    }
                    if(ppb.getValor2()==0){
                        valor2="";
                    }else{
                        valor2=formatter.format(ppb.getValor2()).toString();
                    }
                    model2.addRow(new Object[]{ppb.getCodigo(), ppb.getDescricao(), ppb.getUnid(), oferta, formatter.format(ppb.getValor1()), valor2});
                }
            }

            if (tabela3) {
                DefaultTableModel model3 = (DefaultTableModel) jTable3.getModel();
                model3.setNumRows(0);
                List<Tb_Prod_PainelBeans> lppb = new Tb_Prod_PainelDao().getProdPainel(new DBConfigBeans().getTerminal(),3);
                this.lppbf.addAll(lppb);
                for (Tb_Prod_PainelBeans ppb : lppb) {
                    String oferta = "";
                    String valor2="";
                    if (ppb.getOferta()) {
                        oferta = "<html><font color=red>OFERTA</font></html>";
                    }
                    if(ppb.getValor2()==0){
                        valor2="";
                    }else{
                        valor2=formatter.format(ppb.getValor2()).toString();
                    }
                    model3.addRow(new Object[]{ppb.getCodigo(), ppb.getDescricao(), ppb.getUnid(), oferta,formatter.format(ppb.getValor1()), valor2});
                }
            }

            if (tabela4) {
                DefaultTableModel model4 = (DefaultTableModel) jTable4.getModel();
                model4.setNumRows(0);
                List<Tb_Prod_PainelBeans> lppb = new Tb_Prod_PainelDao().getProdPainel(new DBConfigBeans().getTerminal(),4);
                this.lppbf.addAll(lppb);
                for (Tb_Prod_PainelBeans ppb : lppb) {
                    String oferta = "";
                    String valor2="";
                    if (ppb.getOferta()) {
                        oferta = "<html><font color=red>OFERTA</font></html>";
                    }
                    if(ppb.getValor2()==0){
                        valor2="";
                    }else{
                        valor2=formatter.format(ppb.getValor2()).toString();
                    }
                    model4.addRow(new Object[]{ppb.getCodigo(), ppb.getDescricao(), ppb.getUnid(), oferta, formatter.format(ppb.getValor1()), valor2});
                }
            }
        } catch (SQLException ex) {
            new DBConfig().createArqLog("Erro ao Prencher Tabelas ViewLayoutTabelas: " + ex);
        }
    }

    private void inicializaPainel() {
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(false);
        jScrollPane3.setVisible(false);
        jScrollPane4.setVisible(false);            
        jScrollPane1.setVisible(tabela1);
        jScrollPane2.setVisible(tabela2);
        jScrollPane3.setVisible(tabela3);
        jScrollPane4.setVisible(tabela4);
        cargaPainel(tabela1,tabela2,tabela3,tabela4);
        Tb_ConfigBeans tcb = new Tb_ConfigBeans();
        Color cor = new Color(0, 0, 0, 0);
        Font font = new java.awt.Font(tcb.getFontetipotabela(), tcb.getFonteestilotabela(), tcb.getFonteTabela());
        int rowheighet = (int) (tcb.getFonteTabela() * (2.2));
        Color corfonte = new Color(tcb.getCorfontetabela());

        this.setBackground(cor);
        this.repaint();
        this.validate();
        jScrollPane1.setBackground(cor);
        jScrollPane1.repaint();
        jScrollPane1.validate();
        jTable1.getParent().setBackground(cor);
        if (tcb.isTransparencia()) {
            jTable1.setBackground(cor);
        } else {
            jTable1.setBackground(new Color(new Color(tcb.getCorfundotabela()).getRed(),new Color(tcb.getCorfundotabela()).getGreen(),new Color(tcb.getCorfundotabela()).getBlue(),tcb.getTranspfundotabela()));
        }

        jTable1.setFont(font);
        jTable1.setRowHeight(rowheighet);
        jTable1.setForeground(corfonte);
        jTable1.repaint();
        jTable1.validate();

        jScrollPane2.setBackground(cor);
        jScrollPane2.repaint();
        jScrollPane2.validate();
        jTable2.getParent().setBackground(cor);
        if (tcb.isTransparencia()) {
            jTable2.setBackground(cor);
        } else {
            jTable2.setBackground(new Color(new Color(tcb.getCorfundotabela()).getRed(),new Color(tcb.getCorfundotabela()).getGreen(),new Color(tcb.getCorfundotabela()).getBlue(),tcb.getTranspfundotabela()));
        }
        jTable2.setFont(font);
        jTable2.setRowHeight(rowheighet);
        jTable2.setForeground(corfonte);
        jTable2.repaint();
        jTable2.validate();

        jScrollPane3.setBackground(cor);
        jScrollPane3.repaint();
        jScrollPane3.validate();
        jTable3.getParent().setBackground(cor);
        if (tcb.isTransparencia()) {
            jTable3.setBackground(cor);
        } else {
            jTable3.setBackground(new Color(new Color(tcb.getCorfundotabela()).getRed(),new Color(tcb.getCorfundotabela()).getGreen(),new Color(tcb.getCorfundotabela()).getBlue(),tcb.getTranspfundotabela()));
        }
        jTable3.setFont(font);
        jTable3.setRowHeight(rowheighet);
        jTable3.setForeground(corfonte);
        jTable3.repaint();
        jTable3.validate();

        jScrollPane4.setBackground(cor);
        jScrollPane4.repaint();
        jScrollPane4.validate();
        jTable4.getParent().setBackground(cor);
        if (tcb.isTransparencia()) {
            jTable4.setBackground(cor);
        } else {
            jTable4.setBackground(new Color(new Color(tcb.getCorfundotabela()).getRed(),new Color(tcb.getCorfundotabela()).getGreen(),new Color(tcb.getCorfundotabela()).getBlue(),tcb.getTranspfundotabela()));
        }
        jTable4.setFont(font);
        jTable4.setRowHeight(rowheighet);
        jTable4.setForeground(corfonte);
        jTable4.repaint();
        jTable4.validate();
    }

    private void ajustaColunasPainel() {
        Tb_ConfigBeans tbc = new Tb_ConfigBeans();
        if((tbc.getEspacamento()!=null)&&(tbc.getEspacamento()>0)){
        jTable1.setRowHeight(tbc.getEspacamento());
        jTable2.setRowHeight(tbc.getEspacamento());
        jTable3.setRowHeight(tbc.getEspacamento());
        jTable4.setRowHeight(tbc.getEspacamento());   
        }     
        if(tbc.getTabela1nome().length()>0){
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, tbc.getTabela1nome(), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        }
        if(tbc.getTabela2nome().length()>0){
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, tbc.getTabela2nome(), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N    
        }
        if(tbc.getTabela3nome().length()>0){
        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, tbc.getTabela3nome(), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        }
        if(tbc.getTabela4nome().length()>0){
        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, tbc.getTabela4nome(), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N    
        }       
        if (tbc.isCtcodigo()) {            
            jTable1.getColumnModel().getColumn(0).setMinWidth(50);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable2.getColumnModel().getColumn(0).setMinWidth(50);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable3.getColumnModel().getColumn(0).setMinWidth(50);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable4.getColumnModel().getColumn(0).setMinWidth(50);
            jTable4.getColumnModel().getColumn(0).setMaxWidth(50);
        } else {            
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable2.getColumnModel().getColumn(0).setMinWidth(0);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable3.getColumnModel().getColumn(0).setMinWidth(0);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable4.getColumnModel().getColumn(0).setMinWidth(0);
            jTable4.getColumnModel().getColumn(0).setMaxWidth(0);
        }
        if (tbc.isCtproduto()) {            
            jTable1.getColumnModel().getColumn(1).setMinWidth(100);
            jTable2.getColumnModel().getColumn(1).setMinWidth(100);
            jTable3.getColumnModel().getColumn(1).setMinWidth(100);
            jTable4.getColumnModel().getColumn(1).setMinWidth(100);
        } else {
            jTable1.getColumnModel().getColumn(1).setMinWidth(0);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(0);
            jTable2.getColumnModel().getColumn(1).setMinWidth(0);
            jTable2.getColumnModel().getColumn(1).setMaxWidth(0);
            jTable3.getColumnModel().getColumn(1).setMinWidth(0);
            jTable3.getColumnModel().getColumn(1).setMaxWidth(0);
            jTable4.getColumnModel().getColumn(1).setMinWidth(0);
            jTable4.getColumnModel().getColumn(1).setMaxWidth(0);
        }
        if (tbc.isCtunid()) {
            jTable1.getColumnModel().getColumn(2).setMinWidth(tbc.getFonteTabela() * 2);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(tbc.getFonteTabela() * 2);
            jTable2.getColumnModel().getColumn(2).setMinWidth(tbc.getFonteTabela() * 2);
            jTable2.getColumnModel().getColumn(2).setMaxWidth(tbc.getFonteTabela() * 2);
            jTable3.getColumnModel().getColumn(2).setMinWidth(tbc.getFonteTabela() * 2);
            jTable3.getColumnModel().getColumn(2).setMaxWidth(tbc.getFonteTabela() * 2);
            jTable4.getColumnModel().getColumn(2).setMinWidth(tbc.getFonteTabela() * 2);
            jTable4.getColumnModel().getColumn(2).setMaxWidth(tbc.getFonteTabela() * 2);
        } else {
            jTable1.getColumnModel().getColumn(2).setMinWidth(0);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(0);
            jTable2.getColumnModel().getColumn(2).setMinWidth(0);
            jTable2.getColumnModel().getColumn(2).setMaxWidth(0);
            jTable3.getColumnModel().getColumn(2).setMinWidth(0);
            jTable3.getColumnModel().getColumn(2).setMaxWidth(0);
            jTable4.getColumnModel().getColumn(2).setMinWidth(0);
            jTable4.getColumnModel().getColumn(2).setMaxWidth(0);
        }
        if (tbc.isCtoferta()) {
            jTable1.getColumnModel().getColumn(3).setMinWidth((int)(tbc.getFonteTabela() * 4.5));
            jTable1.getColumnModel().getColumn(3).setMaxWidth((int)(tbc.getFonteTabela() * 4.5));
            jTable2.getColumnModel().getColumn(3).setMinWidth((int)(tbc.getFonteTabela() * 4.5));
            jTable2.getColumnModel().getColumn(3).setMaxWidth((int)(tbc.getFonteTabela() * 4.5));
            jTable3.getColumnModel().getColumn(3).setMinWidth((int)(tbc.getFonteTabela() * 4.5));
            jTable3.getColumnModel().getColumn(3).setMaxWidth((int)(tbc.getFonteTabela() * 4.5));
            jTable4.getColumnModel().getColumn(3).setMinWidth((int)(tbc.getFonteTabela() * 4.5));
            jTable4.getColumnModel().getColumn(3).setMaxWidth((int)(tbc.getFonteTabela() * 4.5));
        } else {
            jTable1.getColumnModel().getColumn(3).setMinWidth(0);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(0);
            jTable2.getColumnModel().getColumn(3).setMinWidth(0);
            jTable2.getColumnModel().getColumn(3).setMaxWidth(0);
            jTable3.getColumnModel().getColumn(3).setMinWidth(0);
            jTable3.getColumnModel().getColumn(3).setMaxWidth(0);
            jTable4.getColumnModel().getColumn(3).setMinWidth(0);
            jTable4.getColumnModel().getColumn(3).setMaxWidth(0);
        }
        if (tbc.isCtvalor1()) {
            jTable1.getColumnModel().getColumn(4).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable1.getColumnModel().getColumn(4).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable1.getColumnModel().getColumn(4).setHeaderValue(tbc.getNomevalor1());
            jTable1.getTableHeader().resizeAndRepaint();

            jTable2.getColumnModel().getColumn(4).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable2.getColumnModel().getColumn(4).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable2.getColumnModel().getColumn(4).setHeaderValue(tbc.getNomevalor1());
            jTable2.getTableHeader().resizeAndRepaint();

            jTable3.getColumnModel().getColumn(4).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable3.getColumnModel().getColumn(4).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable3.getColumnModel().getColumn(4).setHeaderValue(tbc.getNomevalor1());
            jTable3.getTableHeader().resizeAndRepaint();

            jTable4.getColumnModel().getColumn(4).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable4.getColumnModel().getColumn(4).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable4.getColumnModel().getColumn(4).setHeaderValue(tbc.getNomevalor1());
            jTable4.getTableHeader().resizeAndRepaint();
        } else {
            jTable1.getColumnModel().getColumn(4).setMinWidth(0);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
            jTable2.getColumnModel().getColumn(4).setMinWidth(0);
            jTable2.getColumnModel().getColumn(4).setMaxWidth(0);
            jTable3.getColumnModel().getColumn(4).setMinWidth(0);
            jTable3.getColumnModel().getColumn(4).setMaxWidth(0);
            jTable4.getColumnModel().getColumn(4).setMinWidth(0);
            jTable4.getColumnModel().getColumn(4).setMaxWidth(0);
        }
        if (tbc.isCtvalor2()) {
            jTable1.getColumnModel().getColumn(5).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable1.getColumnModel().getColumn(5).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable1.getColumnModel().getColumn(5).setHeaderValue(tbc.getNomevalor2());
            jTable1.getTableHeader().resizeAndRepaint();

            jTable2.getColumnModel().getColumn(5).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable2.getColumnModel().getColumn(5).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable2.getColumnModel().getColumn(5).setHeaderValue(tbc.getNomevalor2());
            jTable2.getTableHeader().resizeAndRepaint();

            jTable3.getColumnModel().getColumn(5).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable3.getColumnModel().getColumn(5).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable3.getColumnModel().getColumn(5).setHeaderValue(tbc.getNomevalor2());
            jTable3.getTableHeader().resizeAndRepaint();

            jTable4.getColumnModel().getColumn(5).setMinWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable4.getColumnModel().getColumn(5).setMaxWidth((int)(tbc.getFonteTabela() * 3.9));
            jTable4.getColumnModel().getColumn(5).setHeaderValue(tbc.getNomevalor2());
            jTable4.getTableHeader().resizeAndRepaint();
        } else {
            jTable1.getColumnModel().getColumn(5).setMinWidth(0);
            jTable1.getColumnModel().getColumn(5).setMaxWidth(0);
            jTable2.getColumnModel().getColumn(5).setMinWidth(0);
            jTable2.getColumnModel().getColumn(5).setMaxWidth(0);
            jTable3.getColumnModel().getColumn(5).setMinWidth(0);
            jTable3.getColumnModel().getColumn(5).setMaxWidth(0);
            jTable4.getColumnModel().getColumn(5).setMinWidth(0);
            jTable4.getColumnModel().getColumn(5).setMaxWidth(0);
        }
    }

    private void updateInicializaPainel() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (getVisibleThis()) {
                    updateAtualizaPainelProd();
                    try {
                        Thread.sleep(15000);
                    } catch (InterruptedException ex) {
                        new DBConfig().createArqLog("Erro Thread Parada ViewLayoutTabelas-updateIniciallizaPainel: " + ex);
                    }
                }
            }
        }).start();
    }

    private void updateAtualizaPainelProd() {
        try {
            List<Tb_Prod_PainelBeans> lppb = new ArrayList<>();   
            Integer tabelas=0;
            String painel="";
            if(this.tabela1){
                painel="'1'";
            }
            if(this.tabela2){
                if(!painel.equals("")){
                painel="'2',"+painel;
                }else{
                painel="'2'";
                }
            }
            if(this.tabela3){
                if(!painel.equals("")){
                painel="'3',"+painel;
                }else{
                painel="'3'";
                }
            }if(this.tabela4){
                if(!painel.equals("")){
                painel="'4',"+painel;
                }else{
                painel="'4'";
                }
            }
            
            lppb = new Tb_Prod_PainelDao().getProdPainelTabelas(new DBConfigBeans().getTerminal(),painel);            
            if (comparaListPainel(lppbf, lppb)) {                   
                this.setVisible(false);                
                this.view.atualizaGradeProduto();
            }
        } catch (SQLException ex) {
            new DBConfig().createArqLog("Erro ao Atualizar Produtos ViewLayoutTableas-updateInicializaPainel: " + ex);
        }
    }

    private boolean comparaListPainel(List<Tb_Prod_PainelBeans> lppbf, List<Tb_Prod_PainelBeans> lppb) {
        if (lppb != null) {
            if (lppb.size() != lppbf.size()) {
                return true;
            } else {
                for (int i = 0; i < lppb.size(); i++) {
                    if (!lppb.get(i).getCodigo().equals(lppbf.get(i).getCodigo())) {                        
                        return true;
                    }
                    if (!lppb.get(i).getDescricao().equals(lppbf.get(i).getDescricao())) {                        
                        return true;
                    }
                    if (!lppb.get(i).getUnid().equals(lppbf.get(i).getUnid())) {                        
                        return true;
                    }
                    if (!lppb.get(i).getValor1().toString().equals(lppbf.get(i).getValor1().toString())) {                        
                        return true;
                    }
                    if (!lppb.get(i).getValor2().equals(lppbf.get(i).getValor2())) {                        
                        return true;
                    }
                    if (!lppb.get(i).getOferta().equals(lppbf.get(i).getOferta())) {                        
                        return true;
                    }
                }
                return false;
            }
        }
        return false;
    }

    public boolean getVisibleThis(){
        return this.isVisible();
    }
}
